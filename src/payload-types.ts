/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    blog: Blog;
    services: Service;
    'service-bookings': ServiceBooking;
    products: Product;
    'contact-submissions': ContactSubmission;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    blog: BlogSelect<false> | BlogSelect<true>;
    services: ServicesSelect<false> | ServicesSelect<true>;
    'service-bookings': ServiceBookingsSelect<false> | ServiceBookingsSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    'contact-submissions': ContactSubmissionsSelect<false> | ContactSubmissionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'admin' | 'user';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  caption?: string | null;
  credit?: string | null;
  category?: ('products' | 'services' | 'gallery' | 'blog' | 'general') | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    hero?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    'blog-card'?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    'blog-feature'?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog".
 */
export interface Blog {
  id: string;
  /**
   * The main title of the blog post
   */
  title: string;
  /**
   * URL-friendly version of the title (used in URLs)
   */
  slug: string;
  /**
   * The main content of the blog post
   */
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Short summary of the blog post (used in previews)
   */
  excerpt?: string | null;
  /**
   * Main image for the blog post
   */
  featuredImage?: (string | null) | Media;
  /**
   * Author information
   */
  author: {
    name: string;
    email?: string | null;
    bio?: string | null;
  };
  /**
   * When the blog post was published
   */
  publishedDate?: string | null;
  /**
   * Estimated reading time in minutes
   */
  readTime?: number | null;
  /**
   * Tags for categorizing the blog post
   */
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Categories for organizing blog posts
   */
  categories?:
    | {
        category: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Publication status of the blog post
   */
  status: 'draft' | 'published' | 'archived';
  /**
   * SEO settings for the blog post
   */
  seo?: {
    /**
     * SEO title (if different from main title)
     */
    metaTitle?: string | null;
    /**
     * SEO meta description
     */
    metaDescription?: string | null;
    /**
     * SEO keywords (comma-separated)
     */
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services".
 */
export interface Service {
  id: string;
  /**
   * The title of the service page (for SEO)
   */
  pageTitle: string;
  /**
   * URL-friendly identifier for the service page
   */
  slug: string;
  /**
   * Type of repair service
   */
  serviceType: 'phone' | 'laptop' | 'tablet' | 'console' | 'data-recovery';
  /**
   * Hero image for the service page
   */
  headerImage: string | Media;
  /**
   * Main heading for the service page
   */
  title: string;
  /**
   * Subheading for the service page
   */
  subtitle?: string | null;
  /**
   * Main description of the service
   */
  description: string;
  /**
   * List of service features or benefits
   */
  features: {
    text: string;
    /**
     * Optional icon class for this feature
     */
    icon?: string | null;
    id?: string | null;
  }[];
  /**
   * Detailed information about the service
   */
  serviceDetails: {
    /**
     * Image for this service detail
     */
    image: string | Media;
    /**
     * Icon class for this service detail
     */
    icon: string;
    /**
     * Title for this service detail
     */
    title: string;
    /**
     * Description for this service detail
     */
    description: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    id?: string | null;
  }[];
  /**
   * Frequently asked questions about the service
   */
  faqs?:
    | {
        /**
         * The question
         */
        question: string;
        /**
         * The answer to the question
         */
        answer: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        id?: string | null;
      }[]
    | null;
  /**
   * Customer testimonials specific to this service
   */
  testimonials?:
    | {
        /**
         * Customer name
         */
        name: string;
        /**
         * Customer occupation or location
         */
        occupation?: string | null;
        /**
         * Customer image
         */
        image?: (string | null) | Media;
        /**
         * Rating from 1-5 stars
         */
        rating: number;
        /**
         * Testimonial text
         */
        text: string;
        /**
         * Date of the testimonial
         */
        date?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Related services to show at the bottom of the page
   */
  relatedServices?:
    | {
        /**
         * Title of the related service
         */
        title: string;
        /**
         * Slug of the related service page
         */
        slug: string;
        /**
         * Image for the related service
         */
        image?: (string | null) | Media;
        /**
         * Brief description of the related service
         */
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * SEO metadata for the service page
   */
  seo?: {
    /**
     * Meta title for SEO (defaults to page title if not provided)
     */
    metaTitle?: string | null;
    /**
     * Meta description for SEO
     */
    metaDescription?: string | null;
    /**
     * Keywords for SEO
     */
    keywords?:
      | {
          keyword: string;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "service-bookings".
 */
export interface ServiceBooking {
  id: string;
  fullName: string;
  email: string;
  phone: string;
  serviceType: 'phone-repair' | 'laptop-repair' | 'tablet-repair' | 'console-repair' | 'other';
  status: 'pending' | 'confirmed' | 'in-progress' | 'completed' | 'cancelled';
  /**
   * Internal notes for this booking
   */
  notes?: string | null;
  /**
   * Indicates if WhatsApp message was successfully sent
   */
  whatsappMessageSent?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: string;
  title: string;
  slug?: string | null;
  image: string | Media;
  category: 'phone-repair' | 'laptop-repair' | 'tablet-repair' | 'accessories' | 'battery-services' | 'water-damage';
  serviceType: 'service' | 'product';
  isActive?: boolean | null;
  isFeatured?: boolean | null;
  whatsappMessage?: string | null;
  sortOrder?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-submissions".
 */
export interface ContactSubmission {
  id: string;
  /**
   * Contact person name
   */
  name: string;
  /**
   * Contact email address
   */
  email: string;
  /**
   * Contact phone number
   */
  phoneNumber: string;
  /**
   * Company name (if provided)
   */
  company?: string | null;
  /**
   * Message content
   */
  message?: string | null;
  /**
   * Current status of this contact submission
   */
  status: 'new' | 'in-progress' | 'completed' | 'archived';
  /**
   * Date and time of submission
   */
  submittedAt: string;
  /**
   * Internal notes about this contact (not visible to customers)
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'blog';
        value: string | Blog;
      } | null)
    | ({
        relationTo: 'services';
        value: string | Service;
      } | null)
    | ({
        relationTo: 'service-bookings';
        value: string | ServiceBooking;
      } | null)
    | ({
        relationTo: 'products';
        value: string | Product;
      } | null)
    | ({
        relationTo: 'contact-submissions';
        value: string | ContactSubmission;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  credit?: T;
  category?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        hero?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        'blog-card'?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        'blog-feature'?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog_select".
 */
export interface BlogSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  content?: T;
  excerpt?: T;
  featuredImage?: T;
  author?:
    | T
    | {
        name?: T;
        email?: T;
        bio?: T;
      };
  publishedDate?: T;
  readTime?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  categories?:
    | T
    | {
        category?: T;
        id?: T;
      };
  status?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services_select".
 */
export interface ServicesSelect<T extends boolean = true> {
  pageTitle?: T;
  slug?: T;
  serviceType?: T;
  headerImage?: T;
  title?: T;
  subtitle?: T;
  description?: T;
  features?:
    | T
    | {
        text?: T;
        icon?: T;
        id?: T;
      };
  serviceDetails?:
    | T
    | {
        image?: T;
        icon?: T;
        title?: T;
        description?: T;
        id?: T;
      };
  faqs?:
    | T
    | {
        question?: T;
        answer?: T;
        id?: T;
      };
  testimonials?:
    | T
    | {
        name?: T;
        occupation?: T;
        image?: T;
        rating?: T;
        text?: T;
        date?: T;
        id?: T;
      };
  relatedServices?:
    | T
    | {
        title?: T;
        slug?: T;
        image?: T;
        description?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?:
          | T
          | {
              keyword?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "service-bookings_select".
 */
export interface ServiceBookingsSelect<T extends boolean = true> {
  fullName?: T;
  email?: T;
  phone?: T;
  serviceType?: T;
  status?: T;
  notes?: T;
  whatsappMessageSent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  image?: T;
  category?: T;
  serviceType?: T;
  isActive?: T;
  isFeatured?: T;
  whatsappMessage?: T;
  sortOrder?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-submissions_select".
 */
export interface ContactSubmissionsSelect<T extends boolean = true> {
  name?: T;
  email?: T;
  phoneNumber?: T;
  company?: T;
  message?: T;
  status?: T;
  submittedAt?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}